blueprint:
  name: LuxPower Reconnect
  description: Schedule a reconnection if the last data received is x minutes (configurable) ago, reconnection is attempted every minute if it connect fails afterwards.
  domain: automation
  input:
    luxpower_time_entity:
      name: LuxPower last data received entity
      description: The last received entity.
      selector:
        entity:
          domain: sensor
    luxpower_ac_charge_switch:
      name: LuxPower AC charge switch
      description: We need at least one switch to validate that the input entities have refreshed as these can be seperate to the last_received_time
      selector:
        entity:
          domain: switch
    reconnect_check_interval:
      name: Interval for the reconnection checking
      description: Input the interval in minutes for triggering reconnection if data is not received in the specified time interval
      default: 10.0
      selector:
        number:
          min: 1.0
          max: 60.0

mode: single

trigger:
- platform: time_pattern
  minutes: /1

variables:
  luxpowerTimeEntity: !input luxpower_time_entity
  luxpowerSwitchEntity: !input luxpower_ac_charge_switch
  timeInterval: !input reconnect_check_interval

condition:
  - condition: or
    conditions:
      - condition: template
        value_template: >-
          {% set last_timestamp = state_attr(luxpowerTimeEntity, 'timestamp') %}
          {{ last_timestamp is not none and (now().timestamp() - last_timestamp > 60 * timeInterval) }}
      - condition: template
        value_template: "{{ states(luxpowerSwitchEntity) == 'unavailable' }}"

action:
  - service: luxpower.luxpower_reconnect
    data:
      dongle: "{{ state_attr(luxpowerTimeEntity, 'dongle') }}"
